AWSTemplateFormatVersion: "2010-09-09"

Description:
  Create for Riasetech

Resources:
  Raise-VPC:
#VPC作成するタイプを指定
    Type: AWS::EC2::VPC
    Properties:
#CidrBlockを指定
      CidrBlock: 10.0.0.0/16
# VPC に対して DNS 解決がサポートされているか
      EnableDnsSupport: true
# VPC 内に起動されるインスタンスが DNS ホスト名を取得するか
      EnableDnsHostnames: true
#タグの指定、Key、Valueの順に記載する
      Tags:
        - Key: Name
          Value: Raise-VPC

#IGWの作成
  Raise-IGW:
#インターネットゲートウェイ作成するタイプを指定
    Type: AWS::EC2::InternetGateway
    Properties:
#タグの指定、Key、Valueの順に記載する
      Tags:
        - Key: Name
          Value: Raise-IGW

#IGWをVPCにアタッチ
  AttachGateway:
#IGWをVPCにアタッチするタイプを指定
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
#【!Ref】は設定済みのリソースを指定できる
      VpcId: !Ref Raise-VPC
      InternetGatewayId: !Ref RaiseIGW


#パブリックサブネット1の作成
  PublicSubNet1:
#サブネットを作成するタイプを指定
    Type: AWS::EC2::Subnet
    Properties:
#AZの指定
      AvailabilityZone: ap-northeast-1a
#【!Ref】で上で設定したVPCを指定
      VpcId: !Ref RaiseVPC
#CidrBlockを指定
      CidrBlock: 10.0.16.0/20
#タグの指定、Key、Valueの順に記載する
      Tags:
        - Key: Name
          Value: Public-SubNet1

#パブリックサブネット2の作成
  PublicSubNet2:
#サブネットを作成するタイプを指定
    Type: AWS::EC2::Subnet
    Properties:
#AZの指定
      AvailabilityZone: ap-northeast-1c
#【!Ref】で上で設定したVPCを指定
      VpcId: !Ref RaiseVPC
#CidrBlockを指定
      CidrBlock: 10.0.0.0/20
#タグの指定、Key、Valueの順に記載する
      Tags:
        - Key: Name
          Value: Public-SubNet2

#プライベートサブネット1の作成
  PrivateSubNet1:
#サブネットを作成するタイプを指定
    Type: AWS::EC2::Subnet
    Properties:
#AZの指定
      AvailabilityZone: ap-northeast-1a
#【!Ref】で上で設定したVPCを指定
      VpcId: !Ref RaiseVPC
#CidrBlockを指定
      CidrBlock: 10.0.128.0/20
#タグの指定、Key、Valueの順に記載する
      Tags:
        - Key: Name
          Value: Private-SubNet1

#プライベートサブネット2の作成
  PrivateSubNet2:
#サブネットを作成するタイプを指定
    Type: AWS::EC2::Subnet
    Properties:
#AZの指定
      AvailabilityZone: ap-northeast-1c
#【!Ref】で上で設定したVPCを指定
      VpcId: !Ref RaiseVPC
#CidrBlockを指定
      CidrBlock: 10.0.112.0/20
#タグの指定、Key、Valueの順に記載する
      Tags:
        - Key: Name
          Value: Private-SubNet2

#ルートテーブルの作成
  PublicRouteTable1:
#ルートテーブルを作成するタイプを指定
    Type: AWS::EC2::RouteTable
    Properties:
#【!Ref】で上で設定したVPCを指定
      VpcId: !Ref RaiseVPC
#タグの指定、Key、Valueの順に記載する
      Tags:
        - Key: Name
          Value: TEST-RouteTable1

#ルートテーブルの作成
  PrivateRouteTable1:
#ルートテーブルを作成するタイプを指定
    Type: AWS::EC2::RouteTable
    Properties:
#【!Ref】で上で設定したVPCを指定
      VpcId: !Ref RaiseVPC
#タグの指定、Key、Valueの順に記載する
      Tags:
        - Key: Name
          Value: TEST-RouteTable2

#ルートテーブルの内容を設定※プライベート不要（サブネット-インターネット間のルーティングをルートテーブルに設定）
  Routing1:
#ルートテーブルに設定を登録するタイプを指定
    Type: AWS::EC2::Route
    Properties:
#【!Ref】で適用するルートテーブルを指定
      RouteTableId: !Ref PublicRouteTable1
#許可するCidrBlockを指定
      DestinationCidrBlock: 0.0.0.0/0
#【!Ref】で適用するIGWを指定
      GatewayId: !Ref RaiseIGW

# Privateの場合、Routeは不要

#パブリックルートテーブルをサブネットに関連付け
  PublicRouteTableAssociate1:
#パブリックルートテーブルをサブネットに関連付けするタイプを指定
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
#【!Ref】で適用するサブネットを指定
      SubnetId: !Ref PublicSubNet1
#【!Ref】で適用するルートテーブルを指定
      RouteTableId: !Ref PublicRouteTable1

#ルートテーブルをサブネットに関連付け
  PublicRouteTableAssociate2:
#ルートテーブルをサブネットに関連付けするタイプを指定
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
#【!Ref】で適用するサブネットを指定
      SubnetId: !Ref PublicSubNet2
#【!Ref】で適用するルートテーブルを指定
      RouteTableId: !Ref PublicRouteTable1

#プライベートルートテーブルをサブネットに関連付け
  PrivateRouteTableAssociate1:
#プライベートルートテーブルをサブネットに関連付けするタイプを指定
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
#【!Ref】で適用するサブネットを指定
      SubnetId: !Ref PrivateSubNet1
#【!Ref】で適用するルートテーブルを指定
      RouteTableId: !Ref PrivateRouteTable1


#セキュリティグループの作成
  PublicSecurityGroup:
#セキュリティグループを作成するタイプを指定
    Type: AWS::EC2::SecurityGroup
    Properties:
#ルールの名前
      GroupName: Public-SSH-SecurityGroup
#ルールの説明
      GroupDescription: TEST-SecurityGroup
#【!Ref】で上で設定したVPCを指定
      VpcId: !Ref RaiseVPC
#接続許可（複数設定の場合は"-"で区切って連続して書く）
      SecurityGroupIngress:
      - 
#プロトコル指定
        IpProtocol: tcp
#送信元IPアドレス
        CidrIp: 0.0.0.0/0
#送信元ポート
        FromPort: "22"
#送信先ポート
        ToPort: "22"
      - 
#プロトコルHTTP指定
        IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        FromPort: "80"
        ToPort: "80"

      - 
#プロトコルHTTPS指定
        IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        FromPort: "443"
        ToPort: "443"

#アウトバウンドを定義
      SecurityGroupEgress:
      - 
#送信元IPアドレス
        CidrIp: 0.0.0.0/0
#全てのプロトコルを定義
        IpProtocol: -1

      Tags:
        - Key: Name
          Value: Public-SecurityGroup


#セキュリティグループの作成
  RDSSecurityGroup:
#セキュリティグループを作成するタイプを指定
    Type: AWS::EC2::SecurityGroup
    Properties:
#ルールの名前
      GroupName: Private-SecurityGroup
#ルールの説明
      GroupDescription: TEST-SecurityGroup
#【!Ref】で上で設定したVPCを指定
      VpcId: !Ref Raise-VPC
#アウトバウンドを定義
      SecurityGroupEgress:
#送信元IPアドレス
        - CidrIp: 0.0.0.0/0
#全てのプロトコルを定義
          IpProtocol: -1

      Tags:
        - Key: Name
          Value: RDS-SecurityGroup

#キーペア―の作成
  NewKeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
#キーペア―の名前
      KeyName: KeyPair20221030
      
#EC2（インスタンス作成）
  PublicEC2Instance:
#インスタンスを作成するタイプを指定
    Type: AWS::EC2::Instance
    Properties:
#AMIのID(Amazon Linux 2 AMI (HVM), SSD Volume Type)
      ImageId: ami-09ebacdc178ae23b7
#キーペア（作成済みのキーペアを指定）
      KeyName: For-Raisetech_20220730.pem
#インスタンスタイプ
      InstanceType: t2.micro
#シャットダウン動作
      InstanceInitiatedShutdownBehavior: stop
#テナンシー
      Tenancy: default
#インターフェースの設定
      NetworkInterfaces:
# パブリックIPを自動で割り振り
        - AssociatePublicIpAddress: "true"
#設定を行うENIの番号
          DeviceIndex: "0"
#【!Ref】で上で設定したサブネット指定
          SubnetId: !Ref TestSubNet1
          GroupSet:
# 上のセキュリティグループを指定
            - !Ref New-SecurityGroup
# プライベートIPアドレス指定
          PrivateIpAddress: 10.0.22.252

#タグの指定、Key、Valueの順に記載する
      Tags:
          - Key: Name
            Value: Public_linux_instance1


#二つ目のパブリックインスタンス作成
  PublicEC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-09ebacdc178ae23b7
      KeyName: !Ref NewKeyPair
      InstanceType: t2.micro
      InstanceInitiatedShutdownBehavior: stop
      Tenancy: default
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref PublicSubNet2
          GroupSet:
            - !Ref PublicSecurityGroup
          PrivateIpAddress: 10.0.7.217

      Tags:
          - Key: Name
            Value: Private_linux_instance2


#RDSサブネットグループを作成
  RDSSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
#説明
      DBSubnetGroupDescription: "dedicated to ut-rds"
#DBサブネットグループ名
      DBSubnetGroupName: "ut_dbsubnet"
      SubnetIds:
#グループ化するサブネット
      - !Ref PrivateSubNet1
      - !Ref PrivateSubNet2
      Tags:
      -
        Key: "Name"
        Value: "RDS_Formation_test"

#RDSの作成
  RDSInstance:
    Type: "AWS::RDS::DBInstance"
#削除時、リソースをスナップショットで保持
    DeletionPolicy: Snapshot
    Properties:
#設定したいDBインスタンス識別子を入力
      DBInstanceIdentifier: TestCloudMySQL
#DBインスタンス名
      DBName: sample_database
#DBエンジンを指定
      Engine: mysql
#マルチAZを有効
      MultiAZ: true
#マスターユーザー名指定
      MasterUsername: admin
#パスワードの設定
      MasterUserPassword: Sigsig34573190
#DBインスタンスタイプを入力
      DBInstanceClass: db.t3.micro
#コストを考慮して最小値設定
      AllocatedStorage: '20'
#RDSサブネットグループの指定
      DBSubnetGroupName: !Ref RDSSubnetGroup
#パブリックアクセスを無効化
      PubliclyAccessible: true
#RDS用のセキュリティグループを指定
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      Tags:
      -
        Key: "Name"
        Value: "ut-rds"
